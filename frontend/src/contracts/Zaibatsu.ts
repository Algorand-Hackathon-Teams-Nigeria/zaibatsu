/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create_pool(pay,string,string,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "lend_to_pool(txn,axfer,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "borrow_from_pool(axfer,uint64,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Zaibatsu",
    "methods": [
      {
        "name": "create_pool",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "pool_id"
          },
          {
            "type": "string",
            "name": "pool_name"
          },
          {
            "type": "string",
            "name": "pool_tenor"
          },
          {
            "type": "string",
            "name": "pool_asset_id"
          },
          {
            "type": "string",
            "name": "pool_mpr"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "lend_to_pool",
        "args": [
          {
            "type": "txn",
            "name": "opt_in_txn"
          },
          {
            "type": "axfer",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "pool_id"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "borrow_from_pool",
        "args": [
          {
            "type": "axfer",
            "name": "txn"
          },
          {
            "type": "uint64",
            "name": "dollar_rate"
          },
          {
            "type": "string",
            "name": "pool_id"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Zaibatsu smart contract.
 */
export type Zaibatsu = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_pool(pay,string,string,string,string,string)void' | 'create_pool', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        pool_id: string
        pool_name: string
        pool_tenor: string
        pool_asset_id: string
        pool_mpr: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, pool_id: string, pool_name: string, pool_tenor: string, pool_asset_id: string, pool_mpr: string]
      returns: void
    }>
    & Record<'lend_to_pool(txn,axfer,string)void' | 'lend_to_pool', {
      argsObj: {
        opt_in_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        pool_id: string
      }
      argsTuple: [opt_in_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, pool_id: string]
      returns: void
    }>
    & Record<'borrow_from_pool(axfer,uint64,string,uint64)void' | 'borrow_from_pool', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        dollar_rate: bigint | number
        pool_id: string
        amount: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, dollar_rate: bigint | number, pool_id: string, amount: bigint | number]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type ZaibatsuSig = keyof Zaibatsu['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ZaibatsuSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Zaibatsu smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ZaibatsuSig> = Zaibatsu['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Zaibatsu smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ZaibatsuSig> = Zaibatsu['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ZaibatsuCreateCalls = (typeof ZaibatsuCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ZaibatsuCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ZaibatsuDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ZaibatsuCreateCalls) => ZaibatsuCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ZaibatsuCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Zaibatsu smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Zaibatsu smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_pool(pay,string,string,string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createPool(args: MethodArgs<'create_pool(pay,string,string,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_pool(pay,string,string,string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.pool_id, args.pool_name, args.pool_tenor, args.pool_asset_id, args.pool_mpr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the lend_to_pool(txn,axfer,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static lendToPool(args: MethodArgs<'lend_to_pool(txn,axfer,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'lend_to_pool(txn,axfer,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.opt_in_txn, args.txn, args.pool_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the borrow_from_pool(axfer,uint64,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static borrowFromPool(args: MethodArgs<'borrow_from_pool(axfer,uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'borrow_from_pool(axfer,uint64,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.dollar_rate, args.pool_id, args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Zaibatsu smart contract
 */
export class ZaibatsuClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ZaibatsuClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Zaibatsu['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Zaibatsu smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ZaibatsuDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ZaibatsuCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Zaibatsu smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Zaibatsu smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.optIn(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Zaibatsu smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the create_pool(pay,string,string,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createPool(args: MethodArgs<'create_pool(pay,string,string,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuCallFactory.createPool(args, params))
  }

  /**
   * Calls the lend_to_pool(txn,axfer,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public lendToPool(args: MethodArgs<'lend_to_pool(txn,axfer,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuCallFactory.lendToPool(args, params))
  }

  /**
   * Calls the borrow_from_pool(axfer,uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public borrowFromPool(args: MethodArgs<'borrow_from_pool(axfer,uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuCallFactory.borrowFromPool(args, params))
  }

  public compose(): ZaibatsuComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createPool(args: MethodArgs<'create_pool(pay,string,string,string,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      lendToPool(args: MethodArgs<'lend_to_pool(txn,axfer,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.lendToPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      borrowFromPool(args: MethodArgs<'borrow_from_pool(axfer,uint64,string,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.borrowFromPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ZaibatsuComposer
  }
}
export type ZaibatsuComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_pool(pay,string,string,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(args: MethodArgs<'create_pool(pay,string,string,string,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ZaibatsuComposer<[...TReturns, MethodReturn<'create_pool(pay,string,string,string,string,string)void'>]>

  /**
   * Calls the lend_to_pool(txn,axfer,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lendToPool(args: MethodArgs<'lend_to_pool(txn,axfer,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ZaibatsuComposer<[...TReturns, MethodReturn<'lend_to_pool(txn,axfer,string)void'>]>

  /**
   * Calls the borrow_from_pool(axfer,uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrowFromPool(args: MethodArgs<'borrow_from_pool(axfer,uint64,string,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): ZaibatsuComposer<[...TReturns, MethodReturn<'borrow_from_pool(axfer,uint64,string,uint64)void'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Zaibatsu smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ZaibatsuComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Zaibatsu smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): ZaibatsuComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ZaibatsuComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<ZaibatsuComposerResults<TReturns>>
}
export type ZaibatsuComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
