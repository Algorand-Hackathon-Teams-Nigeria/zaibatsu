/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "update()void": {
      call_config: {
        update_application: "CALL",
      },
    },
    "delete()void": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "create_zaibatsu_token()(string,string,uint64,uint64)": {
      structs: {
        output: {
          name: "Asset",
          elements: [
            ["key", "string"],
            ["name", "string"],
            ["asset_id", "uint64"],
            ["total", "uint64"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)": {
      structs: {
        output: {
          name: "Asset",
          elements: [
            ["key", "string"],
            ["name", "string"],
            ["asset_id", "uint64"],
            ["total", "uint64"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)": {
      structs: {
        output: {
          name: "Pool",
          elements: [
            ["key", "string"],
            ["name", "string"],
            ["manager", "address"],
            ["date_created", "uint64"],
            ["interest_rate", "uint64"],
            ["collateral_percentage", "uint64"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "opt_app_into_asset(asset)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)": {
      structs: {
        output: {
          name: "PoolContribution",
          elements: [
            ["key", "string"],
            ["contributor", "address"],
            ["asset_id", "uint64"],
            ["amount", "uint64"],
            ["last_update", "uint64"],
            ["contribution_season", "uint64"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)":
      {
        structs: {
          output: {
            name: "PoolBorrowRecord",
            elements: [
              ["key", "string"],
              ["pool_key", "string"],
              ["borrow_duration", "uint64"],
              ["borrowed_amount", "uint64"],
              ["borrow_timestamp", "uint64"],
              ["collateral_amount", "uint64"],
              ["borrowed_asset_dollar_value", "uint64"],
              ["collateral_asset_dollar_value", "uint64"],
            ],
          },
        },
        call_config: {
          no_op: "CALL",
        },
      },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu",
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 4,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        current_season: {
          type: "uint64",
          key: "current_season",
          descr: "",
        },
        default_collateral_percentage: {
          type: "uint64",
          key: "default_collateral_percentage",
          descr: "",
        },
        default_pool_interest_rate_percentage: {
          type: "uint64",
          key: "default_pool_interest_rate_percentage",
          descr: "",
        },
        pool_creation_fee: {
          type: "uint64",
          key: "pool_creation_fee",
          descr: "",
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "Zaibatsu_Service",
    methods: [
      {
        name: "update",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "delete",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "create_zaibatsu_token",
        args: [],
        returns: {
          type: "(string,string,uint64,uint64)",
        },
      },
      {
        name: "fund_account_with_zuto",
        args: [
          {
            type: "axfer",
            name: "opt_in_txn",
          },
          {
            type: "account",
            name: "receiver",
          },
          {
            type: "asset",
            name: "zuto",
          },
          {
            type: "uint64",
            name: "amt",
          },
        ],
        returns: {
          type: "(string,string,uint64,uint64)",
        },
      },
      {
        name: "save_pool",
        args: [
          {
            type: "pay",
            name: "txn",
          },
          {
            type: "string",
            name: "key",
          },
          {
            type: "string",
            name: "name",
          },
        ],
        returns: {
          type: "(string,string,address,uint64,uint64,uint64)",
        },
      },
      {
        name: "opt_app_into_asset",
        args: [
          {
            type: "asset",
            name: "asset",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "lend_to_pool",
        args: [
          {
            type: "axfer",
            name: "txn",
          },
          {
            type: "uint64",
            name: "amount",
          },
          {
            type: "string",
            name: "pool_key",
          },
          {
            type: "asset",
            name: "asset",
          },
          {
            type: "string",
            name: "pool_asset_holdings_key",
          },
          {
            type: "string",
            name: "contribution_key",
          },
          {
            type: "application",
            name: "folks_feed_oracle",
          },
        ],
        returns: {
          type: "(string,address,uint64,uint64,uint64,uint64)",
        },
      },
      {
        name: "borrow_from_pool",
        args: [
          {
            type: "axfer",
            name: "txn",
          },
          {
            type: "string",
            name: "pool_key",
          },
          {
            type: "string",
            name: "pool_asset_holdings_key",
          },
          {
            type: "application",
            name: "folks_feed_oracle",
          },
          {
            type: "asset",
            name: "collateral_asset",
          },
          {
            type: "asset",
            name: "borrow_asset",
          },
          {
            type: "uint64",
            name: "borrow_asset_amount",
          },
          {
            type: "uint64",
            name: "borrow_duration",
          },
          {
            type: "string",
            name: "borrow_record_key",
          },
          {
            type: "account",
            name: "borrower",
          },
        ],
        returns: {
          type: "(string,string,uint64,uint64,uint64,uint64,uint64,uint64)",
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {
    no_op: "CREATE",
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC };
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC };
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC };
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: "delete_application" | OnApplicationComplete.DeleteApplicationOC };
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: "update_application" | OnApplicationComplete.UpdateApplicationOC };
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, "sendParams"> & {
  sendParams?: Omit<
    SendTransactionParams,
    "skipSending" | "atc" | "skipWaiting" | "maxRoundsToWaitForConfirmation" | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  "skipWaiting" | "maxRoundsToWaitForConfirmation" | "populateAppCallResources" | "suppressLog"
>;

/**
 * Defines the types of available calls and state of the ZaibatsuService smart contract.
 */
export type ZaibatsuService = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "update()void" | "update",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "delete()void" | "delete",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "create_zaibatsu_token()(string,string,uint64,uint64)" | "create_zaibatsu_token",
      {
        argsObj: {};
        argsTuple: [];
        returns: Asset;
      }
    > &
    Record<
      "fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)" | "fund_account_with_zuto",
      {
        argsObj: {
          opt_in_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
          receiver: string | Uint8Array;
          zuto: number | bigint;
          amt: bigint | number;
        };
        argsTuple: [
          opt_in_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
          receiver: string | Uint8Array,
          zuto: number | bigint,
          amt: bigint | number
        ];
        returns: Asset;
      }
    > &
    Record<
      "save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)" | "save_pool",
      {
        argsObj: {
          txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
          key: string;
          name: string;
        };
        argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, key: string, name: string];
        returns: Pool;
      }
    > &
    Record<
      "opt_app_into_asset(asset)void" | "opt_app_into_asset",
      {
        argsObj: {
          asset: number | bigint;
        };
        argsTuple: [asset: number | bigint];
        returns: void;
      }
    > &
    Record<
      "lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)" | "lend_to_pool",
      {
        argsObj: {
          txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
          amount: bigint | number;
          pool_key: string;
          asset: number | bigint;
          pool_asset_holdings_key: string;
          contribution_key: string;
          folks_feed_oracle: number | bigint;
        };
        argsTuple: [
          txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
          amount: bigint | number,
          pool_key: string,
          asset: number | bigint,
          pool_asset_holdings_key: string,
          contribution_key: string,
          folks_feed_oracle: number | bigint
        ];
        returns: PoolContribution;
      }
    > &
    Record<
      | "borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)"
      | "borrow_from_pool",
      {
        argsObj: {
          txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
          pool_key: string;
          pool_asset_holdings_key: string;
          folks_feed_oracle: number | bigint;
          collateral_asset: number | bigint;
          borrow_asset: number | bigint;
          borrow_asset_amount: bigint | number;
          borrow_duration: bigint | number;
          borrow_record_key: string;
          borrower: string | Uint8Array;
        };
        argsTuple: [
          txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
          pool_key: string,
          pool_asset_holdings_key: string,
          folks_feed_oracle: number | bigint,
          collateral_asset: number | bigint,
          borrow_asset: number | bigint,
          borrow_asset_amount: bigint | number,
          borrow_duration: bigint | number,
          borrow_record_key: string,
          borrower: string | Uint8Array
        ];
        returns: PoolBorrowRecord;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      current_season?: IntegerState;
      default_collateral_percentage?: IntegerState;
      default_pool_interest_rate_percentage?: IntegerState;
      pool_creation_fee?: IntegerState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type ZaibatsuServiceSig = keyof ZaibatsuService["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ZaibatsuServiceSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Represents a Asset result as a struct
 */
/**
 * Represents a Asset result as a struct
 */
export type Asset = {
  key: string;
  name: string;
  asset_id: bigint;
  total: bigint;
};
/**
 * Converts the tuple representation of a Asset to the struct representation
 */
export function Asset([key, name, asset_id, total]: [string, string, bigint, bigint]) {
  return {
    key,
    name,
    asset_id,
    total,
  };
}
/**
 * Represents a Pool result as a struct
 */
export type Pool = {
  key: string;
  name: string;
  manager: string;
  date_created: bigint;
  interest_rate: bigint;
  collateral_percentage: bigint;
};
/**
 * Converts the tuple representation of a Pool to the struct representation
 */
export function Pool([key, name, manager, date_created, interest_rate, collateral_percentage]: [
  string,
  string,
  string,
  bigint,
  bigint,
  bigint
]) {
  return {
    key,
    name,
    manager,
    date_created,
    interest_rate,
    collateral_percentage,
  };
}
/**
 * Represents a PoolContribution result as a struct
 */
export type PoolContribution = {
  key: string;
  contributor: string;
  asset_id: bigint;
  amount: bigint;
  last_update: bigint;
  contribution_season: bigint;
};
/**
 * Converts the tuple representation of a PoolContribution to the struct representation
 */
export function PoolContribution([key, contributor, asset_id, amount, last_update, contribution_season]: [
  string,
  string,
  bigint,
  bigint,
  bigint,
  bigint
]) {
  return {
    key,
    contributor,
    asset_id,
    amount,
    last_update,
    contribution_season,
  };
}
/**
 * Represents a PoolBorrowRecord result as a struct
 */
export type PoolBorrowRecord = {
  key: string;
  pool_key: string;
  borrow_duration: bigint;
  borrowed_amount: bigint;
  borrow_timestamp: bigint;
  collateral_amount: bigint;
  borrowed_asset_dollar_value: bigint;
  collateral_asset_dollar_value: bigint;
};
/**
 * Converts the tuple representation of a PoolBorrowRecord to the struct representation
 */
export function PoolBorrowRecord([
  key,
  pool_key,
  borrow_duration,
  borrowed_amount,
  borrow_timestamp,
  collateral_amount,
  borrowed_asset_dollar_value,
  collateral_asset_dollar_value,
]: [string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return {
    key,
    pool_key,
    borrow_duration,
    borrowed_amount,
    borrow_timestamp,
    collateral_amount,
    borrowed_asset_dollar_value,
    collateral_asset_dollar_value,
  };
}
/**
 * Maps a method signature from the ZaibatsuService smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ZaibatsuServiceSig> = ZaibatsuService["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the ZaibatsuService smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ZaibatsuServiceSig> = ZaibatsuService["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type ZaibatsuServiceCreateCalls = (typeof ZaibatsuServiceCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type ZaibatsuServiceCreateCallParams = TypedCallParams<undefined> & OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type ZaibatsuServiceUpdateCalls = (typeof ZaibatsuServiceCallFactory)["update"];
/**
 * Defines supported update methods for this smart contract
 */
export type ZaibatsuServiceUpdateCallParams = TypedCallParams<"update()void">;
/**
 * A factory for available 'delete' calls
 */
export type ZaibatsuServiceDeleteCalls = (typeof ZaibatsuServiceCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type ZaibatsuServiceDeleteCallParams = TypedCallParams<"delete()void">;
/**
 * Defines arguments required for the deploy method.
 */
export type ZaibatsuServiceDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ZaibatsuServiceCreateCalls) => ZaibatsuServiceCreateCallParams;
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: ZaibatsuServiceUpdateCalls) => ZaibatsuServiceUpdateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: ZaibatsuServiceDeleteCalls) => ZaibatsuServiceDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ZaibatsuServiceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Zaibatsu_Service smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & OnCompleteNoOp = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Zaibatsu_Service smart contract using the update()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<"update()void">, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: "update()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Zaibatsu_Service smart contract using the delete()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(args: MethodArgs<"delete()void">, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: "delete()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the create_zaibatsu_token()(string,string,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createZaibatsuToken(
    args: MethodArgs<"create_zaibatsu_token()(string,string,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "create_zaibatsu_token()(string,string,uint64,uint64)" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundAccountWithZuto(
    args: MethodArgs<"fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)" as const,
      methodArgs: Array.isArray(args) ? args : [args.opt_in_txn, args.receiver, args.zuto, args.amt],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static savePool(
    args: MethodArgs<"save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)" as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.key, args.name],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the opt_app_into_asset(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optAppIntoAsset(args: MethodArgs<"opt_app_into_asset(asset)void">, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: "opt_app_into_asset(asset)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static lendToPool(
    args: MethodArgs<"lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.txn, args.amount, args.pool_key, args.asset, args.pool_asset_holdings_key, args.contribution_key, args.folks_feed_oracle],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static borrowFromPool(
    args: MethodArgs<"borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.txn,
            args.pool_key,
            args.pool_asset_holdings_key,
            args.folks_feed_oracle,
            args.collateral_asset,
            args.borrow_asset,
            args.borrow_asset_amount,
            args.borrow_duration,
            args.borrow_record_key,
            args.borrower,
          ],
      ...params,
    };
  }
}

/**
 * A client to make calls to the Zaibatsu_Service smart contract
 */
export class ZaibatsuServiceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `ZaibatsuServiceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ZaibatsuService["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter);
  }

  /**
   * Idempotently deploys the Zaibatsu_Service smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ZaibatsuServiceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(ZaibatsuServiceCallFactory.create);
    const updateArgs = params.updateCall?.(ZaibatsuServiceCallFactory.update);
    const deleteArgs = params.deleteCall?.(ZaibatsuServiceCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the Zaibatsu_Service smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & OnCompleteNoOp = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args));
      },
    };
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this;
    return {
      /**
       * Updates an existing instance of the Zaibatsu_Service smart contract using the update()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<"update()void">, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<"update()void">, AppUpdateCallTransactionResult>(
          await $this.appClient.update(ZaibatsuServiceCallFactory.update.update(args, params))
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the Zaibatsu_Service smart contract using the delete()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(args: MethodArgs<"delete()void">, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<"delete()void">>(
          await $this.appClient.delete(ZaibatsuServiceCallFactory.delete.delete(args, params))
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the Zaibatsu_Service smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the create_zaibatsu_token()(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createZaibatsuToken(
    args: MethodArgs<"create_zaibatsu_token()(string,string,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ZaibatsuServiceCallFactory.createZaibatsuToken(args, params), Asset);
  }

  /**
   * Calls the fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundAccountWithZuto(
    args: MethodArgs<"fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ZaibatsuServiceCallFactory.fundAccountWithZuto(args, params), Asset);
  }

  /**
   * Calls the save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public savePool(
    args: MethodArgs<"save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ZaibatsuServiceCallFactory.savePool(args, params), Pool);
  }

  /**
   * Calls the opt_app_into_asset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optAppIntoAsset(args: MethodArgs<"opt_app_into_asset(asset)void">, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuServiceCallFactory.optAppIntoAsset(args, params));
  }

  /**
   * Calls the lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public lendToPool(
    args: MethodArgs<"lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ZaibatsuServiceCallFactory.lendToPool(args, params), PoolContribution);
  }

  /**
   * Calls the borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public borrowFromPool(
    args: MethodArgs<"borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(ZaibatsuServiceCallFactory.borrowFromPool(args, params), PoolBorrowRecord);
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value)) throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value) throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
    return {
      asBigInt() {
        return typeof value.value === "bigint" ? value.value : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint" ? Number(value.value) : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ZaibatsuService["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get current_season() {
        return ZaibatsuServiceClient.getIntegerState(state, "current_season");
      },
      get default_collateral_percentage() {
        return ZaibatsuServiceClient.getIntegerState(state, "default_collateral_percentage");
      },
      get default_pool_interest_rate_percentage() {
        return ZaibatsuServiceClient.getIntegerState(state, "default_pool_interest_rate_percentage");
      },
      get pool_creation_fee() {
        return ZaibatsuServiceClient.getIntegerState(state, "pool_creation_fee");
      },
    };
  }

  public compose(): ZaibatsuServiceComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      createZaibatsuToken(
        args: MethodArgs<"create_zaibatsu_token()(string,string,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.createZaibatsuToken(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(Asset);
        return this;
      },
      fundAccountWithZuto(
        args: MethodArgs<"fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.fundAccountWithZuto(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(Asset);
        return this;
      },
      savePool(
        args: MethodArgs<"save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.savePool(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(Pool);
        return this;
      },
      optAppIntoAsset(args: MethodArgs<"opt_app_into_asset(asset)void">, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.optAppIntoAsset(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(undefined);
        return this;
      },
      lendToPool(
        args: MethodArgs<"lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.lendToPool(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(PoolContribution);
        return this;
      },
      borrowFromPool(
        args: MethodArgs<"borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.borrowFromPool(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
        );
        resultMappers.push(PoolBorrowRecord);
        return this;
      },
      get update() {
        const $this = this;
        return {
          update(args: MethodArgs<"update()void">, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() =>
              client.update.update(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get delete() {
        const $this = this;
        return {
          delete(args: MethodArgs<"delete()void">, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() =>
              client.delete.delete(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender))
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
        return {
          ...result,
          returns: result.returns?.map((val, i) => (resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)),
        };
      },
    } as unknown as ZaibatsuServiceComposer;
  }
}
export type ZaibatsuServiceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_zaibatsu_token()(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createZaibatsuToken(
    args: MethodArgs<"create_zaibatsu_token()(string,string,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"create_zaibatsu_token()(string,string,uint64,uint64)">]>;

  /**
   * Calls the fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundAccountWithZuto(
    args: MethodArgs<"fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): ZaibatsuServiceComposer<
    [...TReturns, MethodReturn<"fund_account_with_zuto(axfer,account,asset,uint64)(string,string,uint64,uint64)">]
  >;

  /**
   * Calls the save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  savePool(
    args: MethodArgs<"save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"save_pool(pay,string,string)(string,string,address,uint64,uint64,uint64)">]>;

  /**
   * Calls the opt_app_into_asset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optAppIntoAsset(
    args: MethodArgs<"opt_app_into_asset(asset)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"opt_app_into_asset(asset)void">]>;

  /**
   * Calls the lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lendToPool(
    args: MethodArgs<"lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): ZaibatsuServiceComposer<
    [
      ...TReturns,
      MethodReturn<"lend_to_pool(axfer,uint64,string,asset,string,string,application)(string,address,uint64,uint64,uint64,uint64)">
    ]
  >;

  /**
   * Calls the borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrowFromPool(
    args: MethodArgs<"borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): ZaibatsuServiceComposer<
    [
      ...TReturns,
      MethodReturn<"borrow_from_pool(axfer,string,string,application,asset,asset,uint64,uint64,string,account)(string,string,uint64,uint64,uint64,uint64,uint64,uint64)">
    ]
  >;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Zaibatsu_Service smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(
      args: MethodArgs<"update()void">,
      params?: AppClientComposeCallCoreParams & AppClientCompilationParams
    ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"update()void">]>;
  };

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Zaibatsu_Service smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(
      args: MethodArgs<"delete()void">,
      params?: AppClientComposeCallCoreParams
    ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"delete()void">]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the Zaibatsu_Service smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuServiceComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): ZaibatsuServiceComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ZaibatsuServiceComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ZaibatsuServiceComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], "txnGroups">;
export type ZaibatsuServiceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type ZaibatsuServiceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
