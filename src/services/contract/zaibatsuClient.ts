/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "hello(string)string": {
      call_config: {
        no_op: "CALL",
      },
    },
    "create()bool": {
      call_config: {
        no_op: "ALL",
      },
    },
    "update()bool": {
      call_config: {
        update_application: "CALL",
      },
    },
    "delete()bool": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "opt_contract_into_asset(asset)bool": {
      call_config: {
        no_op: "CALL",
      },
    },
    "authorize_pool_creation(axfer,application,uint64)(uint64,bool)": {
      call_config: {
        no_op: "CALL",
      },
      structs: {
        output: {
          name: "PoolFundResponse",
          elements: [
            ["amount", "uint64"],
            ["success", "bool"],
          ],
        },
      },
    },
    "fund_pool(axfer)(uint64,bool)": {
      call_config: {
        no_op: "CALL",
      },
      structs: {
        output: {
          name: "PoolFundResponse",
          elements: [
            ["amount", "uint64"],
            ["success", "bool"],
          ],
        },
      },
    },
    "initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)":
    {
      call_config: {
        no_op: "CALL",
      },
      structs: {
        loan_details: {
          name: "LoanDetails",
          elements: [
            ["loan_key", "string"],
            ["loan_type", "string"],
            ["tenure", "uint8"],
            ["principal_asset_id", "uint64"],
            ["collateral_asset_id", "uint64"],
            ["interest_asset_amount", "uint64"],
            ["principal_asset_amount", "uint64"],
            ["collateral_asset_amount", "uint64"],
            ["early_payment_penalty_amount", "uint64"],
            ["payment_rounds", "uint8"],
            ["payment_completion_timestamp", "uint64"],
            ["payment_recipients", "(uint64,address)[]"],
            ["collateral_paid", "bool"],
            ["principal_paid", "bool"],
            ["completed_payment_rounds", "uint8"],
            ["borrower", "address"],
            ["lender_nft_asser_id", "uint64"],
            ["borrower_nft_asser_id", "uint64"],
          ],
        },
        output: {
          name: "LoanDetails",
          elements: [
            ["loan_key", "string"],
            ["loan_type", "string"],
            ["tenure", "uint8"],
            ["principal_asset_id", "uint64"],
            ["collateral_asset_id", "uint64"],
            ["interest_asset_amount", "uint64"],
            ["principal_asset_amount", "uint64"],
            ["collateral_asset_amount", "uint64"],
            ["early_payment_penalty_amount", "uint64"],
            ["payment_rounds", "uint8"],
            ["payment_completion_timestamp", "uint64"],
            ["payment_recipients", "(uint64,address)[]"],
            ["collateral_paid", "bool"],
            ["principal_paid", "bool"],
            ["completed_payment_rounds", "uint8"],
            ["borrower", "address"],
            ["lender_nft_asser_id", "uint64"],
            ["borrower_nft_asser_id", "uint64"],
          ],
        },
      },
    },
    "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)":
    {
      call_config: {
        no_op: "CALL",
      },
      structs: {
        completion_args: {
          name: "CompleteLoanArgs",
          elements: [
            ["loan_unit_name", "string"],
            ["lender_nft_image_url", "string"],
            ["borrower_nft_image_url", "string"],
            ["loan_hash", "string"],
          ],
        },
        output: {
          name: "LoanDetails",
          elements: [
            ["loan_key", "string"],
            ["loan_type", "string"],
            ["tenure", "uint8"],
            ["principal_asset_id", "uint64"],
            ["collateral_asset_id", "uint64"],
            ["interest_asset_amount", "uint64"],
            ["principal_asset_amount", "uint64"],
            ["collateral_asset_amount", "uint64"],
            ["early_payment_penalty_amount", "uint64"],
            ["payment_rounds", "uint8"],
            ["payment_completion_timestamp", "uint64"],
            ["payment_recipients", "(uint64,address)[]"],
            ["collateral_paid", "bool"],
            ["principal_paid", "bool"],
            ["completed_payment_rounds", "uint8"],
            ["borrower", "address"],
            ["lender_nft_asser_id", "uint64"],
            ["borrower_nft_asser_id", "uint64"],
          ],
        },
      },
    },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjkKICAgIC8vIGNsYXNzIFphaWJhdHN1U2VydmljZShhcC5BUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo=",
  },
  state: {
    global: {
      num_byte_slices: 1,
      num_uints: 0,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        admins: {
          type: "bytes",
          key: "admins",
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "ZaibatsuService",
    desc: "\n    ATTENTIONS!!!! THIS IS NOT A DRILL\n    * All percentages comming into the smart contract must have been multiple\n      by 100. This is to account for the lack of support for floats on the AVM\n    ",
    methods: [
      {
        name: "hello",
        args: [
          {
            type: "string",
            name: "name",
          },
        ],
        returns: {
          type: "string",
        },
      },
      {
        name: "create",
        args: [],
        returns: {
          type: "bool",
        },
      },
      {
        name: "update",
        args: [],
        returns: {
          type: "bool",
        },
      },
      {
        name: "delete",
        args: [],
        returns: {
          type: "bool",
        },
      },
      {
        name: "opt_contract_into_asset",
        args: [
          {
            type: "asset",
            name: "asset",
          },
        ],
        returns: {
          type: "bool",
        },
      },
      {
        name: "authorize_pool_creation",
        args: [
          {
            type: "axfer",
            name: "txn",
          },
          {
            type: "application",
            name: "folks_feed_oracle",
          },
          {
            type: "uint64",
            name: "asset_decimals_multiplier",
          },
        ],
        returns: {
          type: "(uint64,bool)",
        },
      },
      {
        name: "fund_pool",
        args: [
          {
            type: "axfer",
            name: "txn",
          },
        ],
        returns: {
          type: "(uint64,bool)",
        },
      },
      {
        name: "initiate_p2p_loan_purchase",
        args: [
          {
            type: "byte[]",
            name: "loan_key",
          },
          {
            type: "application",
            name: "folks_feed_oracle",
          },
          {
            type: "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)",
            name: "loan_details",
          },
          {
            type: "axfer",
            name: "txn",
          },
        ],
        returns: {
          type: "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)",
        },
      },
      {
        name: "complete_p2p_loan_purchase",
        args: [
          {
            type: "byte[]",
            name: "loan_key",
          },
          {
            type: "(string,string,string,string)",
            name: "completion_args",
          },
          {
            type: "asset",
            name: "principal_asset",
          },
          {
            type: "account",
            name: "borrower",
          },
          {
            type: "axfer",
            name: "txn",
          },
        ],
        returns: {
          type: "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)",
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {},
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
  | "delete_application"
  | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
  | "update_application"
  | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<
  AppClientCallCoreParams,
  "sendParams"
> & {
  sendParams?: Omit<
    SendTransactionParams,
    | "skipSending"
    | "atc"
    | "skipWaiting"
    | "maxRoundsToWaitForConfirmation"
    | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  | "skipWaiting"
  | "maxRoundsToWaitForConfirmation"
  | "populateAppCallResources"
  | "suppressLog"
>;

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>;
};

/**
 * Defines the types of available calls and state of the ZaibatsuService smart contract.
 */
export type ZaibatsuService = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "hello(string)string" | "hello",
    {
      argsObj: {
        name: string;
      };
      argsTuple: [name: string];
      returns: string;
    }
  > &
  Record<
    "create()bool" | "create",
    {
      argsObj: {};
      argsTuple: [];
      returns: boolean;
    }
  > &
  Record<
    "update()bool" | "update",
    {
      argsObj: {};
      argsTuple: [];
      returns: boolean;
    }
  > &
  Record<
    "delete()bool" | "delete",
    {
      argsObj: {};
      argsTuple: [];
      returns: boolean;
    }
  > &
  Record<
    "opt_contract_into_asset(asset)bool" | "opt_contract_into_asset",
    {
      argsObj: {
        asset: number | bigint;
      };
      argsTuple: [asset: number | bigint];
      returns: boolean;
    }
  > &
  Record<
    | "authorize_pool_creation(axfer,application,uint64)(uint64,bool)"
    | "authorize_pool_creation",
    {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
        folksFeedOracle: number | bigint;
        assetDecimalsMultiplier: bigint | number;
      };
      argsTuple: [
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
        folksFeedOracle: number | bigint,
        assetDecimalsMultiplier: bigint | number,
      ];
      returns: PoolFundResponse;
    }
  > &
  Record<
    "fund_pool(axfer)(uint64,bool)" | "fund_pool",
    {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
      };
      argsTuple: [
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
      ];
      returns: PoolFundResponse;
    }
  > &
  Record<
    | "initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
    | "initiate_p2p_loan_purchase",
    {
      argsObj: {
        loanKey: Uint8Array;
        folksFeedOracle: number | bigint;
        loanDetails: [
          string,
          string,
          number,
          bigint | number,
          bigint | number,
          bigint | number,
          bigint | number,
          bigint | number,
          bigint | number,
          number,
          bigint | number,
          [bigint | number, string][],
          boolean,
          boolean,
          number,
          string,
          bigint | number,
          bigint | number,
        ];
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
      };
      argsTuple: [
        loanKey: Uint8Array,
        folksFeedOracle: number | bigint,
        loanDetails: [
          string,
          string,
          number,
          bigint | number,
          bigint | number,
          bigint | number,
          bigint | number,
          bigint | number,
          bigint | number,
          number,
          bigint | number,
          [bigint | number, string][],
          boolean,
          boolean,
          number,
          string,
          bigint | number,
          bigint | number,
        ],
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
      ];
      returns: LoanDetails;
    }
  > &
  Record<
    | "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
    | "complete_p2p_loan_purchase",
    {
      argsObj: {
        loanKey: Uint8Array;
        completionArgs: [string, string, string, string];
        principalAsset: number | bigint;
        borrower: string | Uint8Array;
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
      };
      argsTuple: [
        loanKey: Uint8Array,
        completionArgs: [string, string, string, string],
        principalAsset: number | bigint,
        borrower: string | Uint8Array,
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
      ];
      returns: LoanDetails;
    }
  >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      admins?: BinaryState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type ZaibatsuServiceSig = keyof ZaibatsuService["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ZaibatsuServiceSig | undefined> =
  {
    method: TSignature;
    methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
  } & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Represents a PoolFundResponse result as a struct
 */
export type PoolFundResponse = {
  amount: bigint;
  success: boolean;
};
/**
 * Converts the tuple representation of a PoolFundResponse to the struct representation
 */
export function PoolFundResponse([amount, success]: [bigint, boolean]) {
  return {
    amount,
    success,
  };
}
/**
 * Represents a LoanDetails result as a struct
 */
export type LoanDetails = {
  loanKey: string;
  loanType: string;
  tenure: number;
  principalAssetId: bigint;
  collateralAssetId: bigint;
  interestAssetAmount: bigint;
  principalAssetAmount: bigint;
  collateralAssetAmount: bigint;
  earlyPaymentPenaltyAmount: bigint;
  paymentRounds: number;
  paymentCompletionTimestamp: bigint;
  paymentRecipients: [bigint, string][];
  collateralPaid: boolean;
  principalPaid: boolean;
  completedPaymentRounds: number;
  borrower: string;
  lenderNftAsserId: bigint;
  borrowerNftAsserId: bigint;
};
/**
 * Converts the tuple representation of a LoanDetails to the struct representation
 */
export function LoanDetails([
  loanKey,
  loanType,
  tenure,
  principalAssetId,
  collateralAssetId,
  interestAssetAmount,
  principalAssetAmount,
  collateralAssetAmount,
  earlyPaymentPenaltyAmount,
  paymentRounds,
  paymentCompletionTimestamp,
  paymentRecipients,
  collateralPaid,
  principalPaid,
  completedPaymentRounds,
  borrower,
  lenderNftAsserId,
  borrowerNftAsserId,
]: [
    string,
    string,
    number,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    number,
    bigint,
    [bigint, string][],
    boolean,
    boolean,
    number,
    string,
    bigint,
    bigint,
  ]) {
  return {
    loanKey,
    loanType,
    tenure,
    principalAssetId,
    collateralAssetId,
    interestAssetAmount,
    principalAssetAmount,
    collateralAssetAmount,
    earlyPaymentPenaltyAmount,
    paymentRounds,
    paymentCompletionTimestamp,
    paymentRecipients,
    collateralPaid,
    principalPaid,
    completedPaymentRounds,
    borrower,
    lenderNftAsserId,
    borrowerNftAsserId,
  };
}
/**
 * Represents a CompleteLoanArgs result as a struct
 */
export type CompleteLoanArgs = {
  loanUnitName: string;
  lenderNftImageUrl: string;
  borrowerNftImageUrl: string;
  loanHash: string;
};
/**
 * Converts the tuple representation of a CompleteLoanArgs to the struct representation
 */
export function CompleteLoanArgs([
  loanUnitName,
  lenderNftImageUrl,
  borrowerNftImageUrl,
  loanHash,
]: [string, string, string, string]) {
  return {
    loanUnitName,
    lenderNftImageUrl,
    borrowerNftImageUrl,
    loanHash,
  };
}
/**
 * Maps a method signature from the ZaibatsuService smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ZaibatsuServiceSig> =
  ZaibatsuService["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the ZaibatsuService smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ZaibatsuServiceSig> =
  ZaibatsuService["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type ZaibatsuServiceCreateCalls =
  (typeof ZaibatsuServiceCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type ZaibatsuServiceCreateCallParams = TypedCallParams<"create()bool"> &
  OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type ZaibatsuServiceUpdateCalls =
  (typeof ZaibatsuServiceCallFactory)["update"];
/**
 * Defines supported update methods for this smart contract
 */
export type ZaibatsuServiceUpdateCallParams = TypedCallParams<"update()bool">;
/**
 * A factory for available 'delete' calls
 */
export type ZaibatsuServiceDeleteCalls =
  (typeof ZaibatsuServiceCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type ZaibatsuServiceDeleteCallParams = TypedCallParams<"delete()bool">;
/**
 * Defines arguments required for the deploy method.
 */
export type ZaibatsuServiceDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: ZaibatsuServiceCreateCalls,
  ) => ZaibatsuServiceCreateCallParams;
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (
    callFactory: ZaibatsuServiceUpdateCalls,
  ) => ZaibatsuServiceUpdateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (
    callFactory: ZaibatsuServiceDeleteCalls,
  ) => ZaibatsuServiceDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ZaibatsuServiceCallFactory {
  /**
   * Gets available create call factories
   */
  // @ts-ignore
  static get create() {
    return {
      /**
       * Constructs a create call for the ZaibatsuService smart contract using the create()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(
        args: MethodArgs<"create()bool">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ) {
        return {
          method: "create()bool" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the ZaibatsuService smart contract using the update()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(
        args: MethodArgs<"update()bool">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams = {},
      ) {
        return {
          method: "update()bool" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the ZaibatsuService smart contract using the delete()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(
        args: MethodArgs<"delete()bool">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return {
          method: "delete()bool" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(
    args: MethodArgs<"hello(string)string">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "hello(string)string" as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the create()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  // @ts-ignore
  static create(
    args: MethodArgs<"create()bool">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "create()bool" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the opt_contract_into_asset(asset)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optContractIntoAsset(
    args: MethodArgs<"opt_contract_into_asset(asset)bool">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "opt_contract_into_asset(asset)bool" as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the authorize_pool_creation(axfer,application,uint64)(uint64,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static authorizePoolCreation(
    args: MethodArgs<"authorize_pool_creation(axfer,application,uint64)(uint64,bool)">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method:
        "authorize_pool_creation(axfer,application,uint64)(uint64,bool)" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.txn, args.folksFeedOracle, args.assetDecimalsMultiplier],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the fund_pool(axfer)(uint64,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundPool(
    args: MethodArgs<"fund_pool(axfer)(uint64,bool)">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "fund_pool(axfer)(uint64,bool)" as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initiateP2pLoanPurchase(
    args: MethodArgs<"initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method:
        "initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.loanKey, args.folksFeedOracle, args.loanDetails, args.txn],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeP2pLoanPurchase(
    args: MethodArgs<"complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method:
        "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
          args.loanKey,
          args.completionArgs,
          args.principalAsset,
          args.borrower,
          args.txn,
        ],
      ...params,
    };
  }
}

/**
 * A client to make calls to the ZaibatsuService smart contract
 */
export class ZaibatsuServiceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `ZaibatsuServiceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult,
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
        returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return {
      ...result,
      return: returnValue,
    } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ZaibatsuService["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter,
    );
  }

  /**
   * Idempotently deploys the ZaibatsuService smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: ZaibatsuServiceDeployArgs &
      AppClientDeployCoreParams &
      IncludeSchema = {},
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(ZaibatsuServiceCallFactory.create);
    const updateArgs = params.updateCall?.(ZaibatsuServiceCallFactory.update);
    const deleteArgs = params.deleteCall?.(ZaibatsuServiceCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  // @ts-ignore
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the ZaibatsuService smart contract using the create()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(
        args: MethodArgs<"create()bool">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          IncludeSchema &
          CoreAppCallArgs &
          OnCompleteNoOp = {},
      ) {
        return $this.mapReturnValue<
          MethodReturn<"create()bool">,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(
            ZaibatsuServiceCallFactory.create.create(args, params),
          ),
        );
      },
    };
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this;
    return {
      /**
       * Updates an existing instance of the ZaibatsuService smart contract using the update()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(
        args: MethodArgs<"update()bool">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          CoreAppCallArgs = {},
      ) {
        return $this.mapReturnValue<
          MethodReturn<"update()bool">,
          AppUpdateCallTransactionResult
        >(
          await $this.appClient.update(
            ZaibatsuServiceCallFactory.update.update(args, params),
          ),
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the ZaibatsuService smart contract using the delete()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(
        args: MethodArgs<"delete()bool">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return $this.mapReturnValue<MethodReturn<"delete()bool">>(
          await $this.appClient.delete(
            ZaibatsuServiceCallFactory.delete.delete(args, params),
          ),
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the ZaibatsuService smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(
    args: MethodArgs<"hello(string)string">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(ZaibatsuServiceCallFactory.hello(args, params));
  }

  /**
   * Calls the create()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  // @ts-ignore
  public create(
    args: MethodArgs<"create()bool">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    // @ts-ignore
    return this.call(ZaibatsuServiceCallFactory.create(args, params));
  }

  /**
   * Calls the opt_contract_into_asset(asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optContractIntoAsset(
    args: MethodArgs<"opt_contract_into_asset(asset)bool">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(
      ZaibatsuServiceCallFactory.optContractIntoAsset(args, params),
    );
  }

  /**
   * Calls the authorize_pool_creation(axfer,application,uint64)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public authorizePoolCreation(
    args: MethodArgs<"authorize_pool_creation(axfer,application,uint64)(uint64,bool)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(
      ZaibatsuServiceCallFactory.authorizePoolCreation(args, params),
      PoolFundResponse,
    );
  }

  /**
   * Calls the fund_pool(axfer)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundPool(
    args: MethodArgs<"fund_pool(axfer)(uint64,bool)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(
      ZaibatsuServiceCallFactory.fundPool(args, params),
      PoolFundResponse,
    );
  }

  /**
   * Calls the initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initiateP2pLoanPurchase(
    args: MethodArgs<"initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(
      ZaibatsuServiceCallFactory.initiateP2pLoanPurchase(args, params),
      LoanDetails,
    );
  }

  /**
   * Calls the complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeP2pLoanPurchase(
    args: MethodArgs<"complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(
      ZaibatsuServiceCallFactory.completeP2pLoanPurchase(args, params),
      LoanDetails,
    );
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string,
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`,
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string,
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`,
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ZaibatsuService["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get admins() {
        return ZaibatsuServiceClient.getBinaryState(state, "admins");
      },
    };
  }

  public compose(): ZaibatsuServiceComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      hello(
        args: MethodArgs<"hello(string)string">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.hello(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      create(
        args: MethodArgs<"create()bool">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          // @ts-ignore
          client.create(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      optContractIntoAsset(
        args: MethodArgs<"opt_contract_into_asset(asset)bool">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.optContractIntoAsset(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      authorizePoolCreation(
        args: MethodArgs<"authorize_pool_creation(axfer,application,uint64)(uint64,bool)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.authorizePoolCreation(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(PoolFundResponse);
        return this;
      },
      fundPool(
        args: MethodArgs<"fund_pool(axfer)(uint64,bool)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.fundPool(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(PoolFundResponse);
        return this;
      },
      initiateP2pLoanPurchase(
        args: MethodArgs<"initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.initiateP2pLoanPurchase(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(LoanDetails);
        return this;
      },
      completeP2pLoanPurchase(
        args: MethodArgs<"complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.completeP2pLoanPurchase(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(LoanDetails);
        return this;
      },
      get update() {
        const $this = this;
        return {
          update(
            args: MethodArgs<"update()bool">,
            params?: AppClientComposeCallCoreParams &
              AppClientCompilationParams,
          ) {
            promiseChain = promiseChain.then(() =>
              client.update.update(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              }),
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get delete() {
        const $this = this;
        return {
          delete(
            args: MethodArgs<"delete()bool">,
            params?: AppClientComposeCallCoreParams,
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.delete(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              }),
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender,
            ),
          ),
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options }),
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue,
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod,
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue,
          ),
        };
      },
    } as unknown as ZaibatsuServiceComposer;
  }
}
export type ZaibatsuServiceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(
    args: MethodArgs<"hello(string)string">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<
    [...TReturns, MethodReturn<"hello(string)string">]
  >;

  /**
   * Calls the create()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(
    args: MethodArgs<"create()bool">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"create()bool">]>;

  /**
   * Calls the opt_contract_into_asset(asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optContractIntoAsset(
    args: MethodArgs<"opt_contract_into_asset(asset)bool">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<
    [...TReturns, MethodReturn<"opt_contract_into_asset(asset)bool">]
  >;

  /**
   * Calls the authorize_pool_creation(axfer,application,uint64)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  authorizePoolCreation(
    args: MethodArgs<"authorize_pool_creation(axfer,application,uint64)(uint64,bool)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<
    [
      ...TReturns,
      MethodReturn<"authorize_pool_creation(axfer,application,uint64)(uint64,bool)">,
    ]
  >;

  /**
   * Calls the fund_pool(axfer)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundPool(
    args: MethodArgs<"fund_pool(axfer)(uint64,bool)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<
    [...TReturns, MethodReturn<"fund_pool(axfer)(uint64,bool)">]
  >;

  /**
   * Calls the initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initiateP2pLoanPurchase(
    args: MethodArgs<"initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<
    [
      ...TReturns,
      MethodReturn<"initiate_p2p_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    ]
  >;

  /**
   * Calls the complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeP2pLoanPurchase(
    args: MethodArgs<"complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<
    [
      ...TReturns,
      MethodReturn<"complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)">,
    ]
  >;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the ZaibatsuService smart contract using the update()bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(
      args: MethodArgs<"update()bool">,
      params?: AppClientComposeCallCoreParams & AppClientCompilationParams,
    ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"update()bool">]>;
  };

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the ZaibatsuService smart contract using the delete()bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(
      args: MethodArgs<"delete()bool">,
      params?: AppClientComposeCallCoreParams,
    ): ZaibatsuServiceComposer<[...TReturns, MethodReturn<"delete()bool">]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the ZaibatsuService smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs,
  ): ZaibatsuServiceComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): ZaibatsuServiceComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(
    options?: SimulateOptions,
  ): Promise<ZaibatsuServiceComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(
    sendParams?: AppClientComposeExecuteParams,
  ): Promise<ZaibatsuServiceComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  "txnGroups"
>;
export type ZaibatsuServiceComposerSimulateResult<TReturns extends [...any[]]> =
  {
    returns: TReturns;
    methodResults: ABIResult[];
    simulateResponse: modelsv2.SimulateResponse;
  };
export type ZaibatsuServiceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
